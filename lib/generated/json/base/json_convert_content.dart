// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_gitee/repo/bean/repository_entity.dart';
import 'package:flutter_gitee/user/bean/result/success/event_result_entity.dart';
import 'package:flutter_gitee/user/bean/result/success/follow_result_entity.dart';
import 'package:flutter_gitee/user/bean/result/success/login_success_result_entity.dart';
import 'package:flutter_gitee/user/bean/result/success/user_profile_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {
  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    final String type = M.toString();
    if (type == (RepositoryEntity).toString()) {
      return RepositoryEntity.fromJson(json) as M;
    }
    if (type == (RepositoryNamespace).toString()) {
      return RepositoryNamespace.fromJson(json) as M;
    }
    if (type == (RepositoryOwner).toString()) {
      return RepositoryOwner.fromJson(json) as M;
    }
    if (type == (RepositoryAssigner).toString()) {
      return RepositoryAssigner.fromJson(json) as M;
    }
    if (type == (RepositoryPermission).toString()) {
      return RepositoryPermission.fromJson(json) as M;
    }
    if (type == (RepositoryAssignee).toString()) {
      return RepositoryAssignee.fromJson(json) as M;
    }
    if (type == (RepositoryTesters).toString()) {
      return RepositoryTesters.fromJson(json) as M;
    }
    if (type == (EventResultEntity).toString()) {
      return EventResultEntity.fromJson(json) as M;
    }
    if (type == (EventResultActor).toString()) {
      return EventResultActor.fromJson(json) as M;
    }
    if (type == (EventResultRepo).toString()) {
      return EventResultRepo.fromJson(json) as M;
    }
    if (type == (EventResultPayload).toString()) {
      return EventResultPayload.fromJson(json) as M;
    }
    if (type == (EventResultPayloadCommit).toString()) {
      return EventResultPayloadCommit.fromJson(json) as M;
    }
    if (type == (EventResultPayloadCommitAuthor).toString()) {
      return EventResultPayloadCommitAuthor.fromJson(json) as M;
    }
    if (type == (EventResultPayloadTarget).toString()) {
      return EventResultPayloadTarget.fromJson(json) as M;
    }
    if (type == (EventResultOrg).toString()) {
      return EventResultOrg.fromJson(json) as M;
    }
    if (type == (FollowResultEntity).toString()) {
      return FollowResultEntity.fromJson(json) as M;
    }
    if (type == (LoginSuccessResultEntity).toString()) {
      return LoginSuccessResultEntity.fromJson(json) as M;
    }
    if (type == (UserProfileEntity).toString()) {
      return UserProfileEntity.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  //list is returned by type
  static M? _getListChildType<M>(List<dynamic> data) {
    if (<RepositoryEntity>[] is M) {
      return data
          .map<RepositoryEntity>((e) => RepositoryEntity.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryNamespace>[] is M) {
      return data
          .map<RepositoryNamespace>((e) => RepositoryNamespace.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryOwner>[] is M) {
      return data
          .map<RepositoryOwner>((e) => RepositoryOwner.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryAssigner>[] is M) {
      return data
          .map<RepositoryAssigner>((e) => RepositoryAssigner.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryPermission>[] is M) {
      return data
          .map<RepositoryPermission>((e) => RepositoryPermission.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryAssignee>[] is M) {
      return data
          .map<RepositoryAssignee>((e) => RepositoryAssignee.fromJson(e))
          .toList() as M;
    }
    if (<RepositoryTesters>[] is M) {
      return data
          .map<RepositoryTesters>((e) => RepositoryTesters.fromJson(e))
          .toList() as M;
    }
    if (<EventResultEntity>[] is M) {
      return data
          .map<EventResultEntity>((e) => EventResultEntity.fromJson(e))
          .toList() as M;
    }
    if (<EventResultActor>[] is M) {
      return data
          .map<EventResultActor>((e) => EventResultActor.fromJson(e))
          .toList() as M;
    }
    if (<EventResultRepo>[] is M) {
      return data
          .map<EventResultRepo>((e) => EventResultRepo.fromJson(e))
          .toList() as M;
    }
    if (<EventResultPayload>[] is M) {
      return data
          .map<EventResultPayload>((e) => EventResultPayload.fromJson(e))
          .toList() as M;
    }
    if (<EventResultPayloadCommit>[] is M) {
      return data
          .map<EventResultPayloadCommit>(
              (e) => EventResultPayloadCommit.fromJson(e))
          .toList() as M;
    }
    if (<EventResultPayloadCommitAuthor>[] is M) {
      return data
          .map<EventResultPayloadCommitAuthor>(
              (e) => EventResultPayloadCommitAuthor.fromJson(e))
          .toList() as M;
    }
    if (<EventResultPayloadTarget>[] is M) {
      return data
          .map<EventResultPayloadTarget>(
              (e) => EventResultPayloadTarget.fromJson(e))
          .toList() as M;
    }
    if (<EventResultOrg>[] is M) {
      return data
          .map<EventResultOrg>((e) => EventResultOrg.fromJson(e))
          .toList() as M;
    }
    if (<FollowResultEntity>[] is M) {
      return data
          .map<FollowResultEntity>((e) => FollowResultEntity.fromJson(e))
          .toList() as M;
    }
    if (<LoginSuccessResultEntity>[] is M) {
      return data
          .map<LoginSuccessResultEntity>(
              (e) => LoginSuccessResultEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserProfileEntity>[] is M) {
      return data
          .map<UserProfileEntity>((e) => UserProfileEntity.fromJson(e))
          .toList() as M;
    }

    print("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json == null) {
      return null;
    }
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>);
    }
  }
}
